name: ESP32

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths:
      - 'src/**'
      - '.github/workflows/*.yml'
      - 'boards/**'
    tags-ignore:
      - 'v*'
  pull_request:
    branches:
      - master
    paths:
      - 'src/**'
      - '.github/workflows/*.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-environment:
    runs-on: ubuntu-24.04
    steps:
      - name: Get MicroPython latest release
        run: |
          MPY_RELEASE=$(curl --silent "https://api.github.com/repos/micropython/micropython/releases/latest" | jq -r .tag_name)
          echo "MPY_RELEASE=${MPY_RELEASE}" >> $GITHUB_ENV

      - name: Cache ESP-IDF and MicroPython
        id: cache_esp_idf
        uses: actions/cache@v4
        with:
          lookup-only: true
          path: |
            ~/esp-idf/
            ~/.espressif/
            ~/.cache/pip/
            ~/micropython/
          key: mpy-${{ env.MPY_RELEASE }}
          restore-keys: mpy-

      - name: Install dependencies (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

      - name: Clone MicroPython latest release (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          cd ~
          git clone --depth 1 --branch ${{ env.MPY_RELEASE }} https://github.com/micropython/micropython.git
          # git clone --depth 1 --branch mp-dl https://github.com/cnadler86/micropython.git
          cd micropython
          git submodule update --init --depth 1
          cd mpy-cross && make
          # cd ~/micropython/ports/esp32 && make submodules

      - name: Set up ESP-IDF
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          cd ~
          git clone --depth 1 --branch release/v5.4 https://github.com/espressif/esp-idf.git
          git -C esp-idf submodule update --init --recursive --filter=tree:0
          cd esp-idf && ./install.sh esp32s3
          source ./export.sh

  build:
    needs: setup-environment
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        board:
          - ESP32_GENERIC_S3-SPIRAM_OCT
          - ESP32_GENERIC_S3-FLASH_4M
          - ESP32_GENERIC_S3-FLASH_16M

    steps:
      - name: Get MicroPython latest release
        run: |
          MPY_RELEASE=$(curl --silent "https://api.github.com/repos/micropython/micropython/releases/latest" | jq -r .tag_name)
          echo "MPY_RELEASE=${MPY_RELEASE}" >> $GITHUB_ENV

      - name: Cache ESP-IDF and MicroPython
        uses: actions/cache@v4
        with:
          path: |
            ~/esp-idf/
            ~/.espressif/
            ~/.cache/pip/
            ~/micropython/
          key: mpy-${{ env.MPY_RELEASE }}
          restore-keys: mpy-

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build MicroPython
        run: |
          cd ${{ github.workspace }} && cd ..
          git clone https://github.com/cnadler86/mp_jpeg.git
          cd ~/micropython/ports/esp32 && make BOARD=$BOARD_NAME submodules
          cd ${{ github.workspace }}/boards/
          source ~/esp-idf/export.sh
          
          IFS='-' read -r BOARD_NAME BOARD_VARIANT <<< "${{ matrix.board }}"

          IDF_CMD="idf.py  -D MICROPY_DIR="~/micropython" -D MICROPY_BOARD=$BOARD_NAME -B build-${{ matrix.board }}"
          if [ -n "${BOARD_VARIANT}" ]; then
              IDF_CMD="$IDF_CMD -D MICROPY_BOARD_VARIANT=$BOARD_VARIANT"
          fi
          
          eval "$IDF_CMD build"

          cd build-$BOARD_NAME
          python ../makeimg.py sdkconfig bootloader/bootloader.bin partition_table/partition-table.bin micropython.bin firmware.bin micropython.uf2
          
          mkdir -p ~/artifacts
          mv firmware.bin ~/artifacts/firmware-${BOARD_NAME}.bin

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}
          path: ~/artifacts/**
          retention-days: 5

      - name: Upload build logs on failure
        if: failure()  # Dieser Schritt wird nur bei einem Fehlschlag ausgefÃ¼hrt
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.board }}
          path: |
            ~/micropython/ports/esp32/build-${{ matrix.board }}/log/
          retention-days: 5